from ortools.constraint_solver import pywrapcp
from ortools.constraint_solver import routing_enums_pb2
import numpy as np



# Distance callback
class CreateDistanceCallback(object):

  def __init__(self,Z,start):
    self.start = start
    self.Z = Z
    self.matrix = np.matrix([
      [0, 210, 288, 185, 336, 334, 461, 377, 454, 487, 466, 616, 564, 459, 494, 567, 598, 728, 844, 702, 845, 302, 358, 302, 385, 459, 625, 537, 630, 298, 610, 871, 952, 1173, 1052, 1014, 914, 1016, 1078, 1149, 965 ,743, 689, 556, 821, 871],
      [210, 0, 64, 121, 246, 102, 207, 280, 293, 380, 397, 425, 380, 293, 322, 382, 408, 515, 611, 494, 612, 366, 413, 366, 435, 496, 633, 561, 638, 357, 621, 666, 768, 1086, 834, 925, 850, 942, 982, 923, 655, 596, 591, 571, 655, 696],
      [288, 64, 0, 185, 310, 90, 195, 344, 281, 368, 385, 414, 368, 281, 310, 371, 396, 504, 600, 482, 600, 431, 475, 431, 499, 561, 698, 625, 702, 422, 685, 731, 833, 1090, 899, 990, 914, 1007, 1047, 988, 719, 661, 656, 636, 719, 761],
      [185, 121, 185, 0, 124, 103, 208, 158, 222, 313, 330, 358, 313, 226, 255, 315, 341, 448, 544, 427, 545, 245, 291, 346, 359, 420, 557, 485, 542, 236, 509, 590, 692, 996, 758, 838, 756, 848, 861, 802, 533, 475, 470, 450, 542, 584],
      [336, 229, 218, 124, 0, 127, 232, 33, 246, 273, 256, 259, 337, 250, 279, 339, 365, 472, 568, 451, 569, 120, 166, 322, 234, 295, 433, 360, 418, 111, 384, 466, 567, 871, 633, 714, 631, 723, 736, 677, 409, 350, 345, 325, 418, 459],
      [334, 102, 90, 223, 348, 0, 104, 382, 190, 277, 295, 323, 277, 190, 219, 280, 305, 413, 509, 391, 509, 430, 384, 449, 538, 599, 736, 663, 740, 460, 723, 769, 871, 999, 937, 1028, 952, 1045, 1085, 1026, 757, 699, 694, 674, 757, 799],
      [461, 207, 195, 242, 266, 104, 0, 300, 85, 172, 190, 218, 172, 85, 114, 175, 200, 308, 404, 286, 404, 325, 279, 485, 501, 562, 699, 627, 685, 378, 651, 733, 834, 898, 900, 980, 898, 990, 1003, 944, 676, 617, 612, 592, 685, 726],
      [377, 263, 252, 158, 33, 161, 266, 0, 280, 307, 290, 293, 371, 284, 313, 373, 399, 506, 602, 485, 603, 154, 200, 356, 268, 329, 466, 394, 452, 145, 418, 499, 601, 905, 667, 747, 665, 757, 770, 711, 442, 384, 379, 359, 452, 493],
      [454, 327, 315, 222, 246, 224, 167, 280, 0, 126, 143, 231, 238, 69, 180, 240, 266, 373, 469, 352, 470, 279, 233, 400, 480, 542, 679, 606, 664, 357, 630, 712, 814, 814, 880, 960, 877, 970, 982, 923, 655, 596, 591, 571, 664, 705],
      [487, 453, 442, 348, 273, 351, 294, 307, 126, 0, 17, 104, 251, 139, 266, 326, 352, 459, 555, 438, 556, 152, 106, 304, 359, 420, 557, 485, 542, 236, 509, 590, 692, 717, 758, 838, 756, 848, 861, 802, 533, 475, 470, 450, 542, 584],
      [466, 471, 459, 366, 256, 368, 305, 290, 143, 17, 0, 87, 233, 157, 248, 309, 334, 442, 538, 420, 538, 135, 89, 286, 342, 403, 540, 467, 525, 219, 491, 573, 675, 699, 741, 821, 738, 831, 843, 785, 516, 457, 452, 433, 525, 566],
      [616, 425, 414, 356, 380, 323, 218, 414, 133, 111, 128, 0, 146, 132, 161, 221, 247, 354, 450, 333, 451, 264, 218, 266, 471, 532, 669, 596, 654, 347, 620, 702, 804, 680, 870, 950, 867, 960, 972, 914, 645, 586, 581, 561, 654, 695],
      [564, 380, 368, 313, 337, 277, 172, 371, 123, 153, 171, 146, 0, 86, 115, 176, 201, 309, 404, 287, 405, 306, 260, 413, 513, 574, 711, 638, 696, 390, 662, 744, 846, 826, 912, 992, 909, 1002, 1014, 956, 687, 628, 623, 604, 696, 738],
      [459, 293, 281, 226, 250, 190, 85, 284, 69, 139, 157, 132, 86, 0, 28, 89, 114, 222, 318, 200, 319, 292, 246, 416, 485, 546, 683, 610, 668, 361, 634, 716, 818, 849, 884, 964, 881, 974, 986, 928, 659, 600, 595, 576, 668, 709],
      [494, 322, 310, 255, 279, 219, 114, 313, 98, 168, 185, 161, 115, 28, 0, 60, 85, 193, 289, 171, 290, 321, 275, 428, 514, 575, 712, 639, 697, 390, 663, 745, 847, 841, 913, 993, 910, 1003, 1015, 957, 688, 629, 624, 604, 697, 738],
      [567, 382, 371, 315, 339, 280, 175, 373, 158, 228, 246, 221, 176, 89, 60, 0, 25, 133, 228, 111, 229, 381, 335, 488, 574, 635, 772, 699, 757, 451, 723, 805, 907, 901, 973, 1053, 971, 1063, 1076, 1017, 748, 690, 685, 665, 757, 799],
      [598, 408, 396, 341, 365, 305, 200, 399, 184, 254, 271, 247, 201, 114, 85, 25, 0, 107, 203, 85, 204, 407, 361, 514, 600, 661, 798, 725, 783, 476, 749, 831, 933, 927, 999, 1079, 996, 1089, 1101, 1042, 774, 715, 710, 690, 783, 824],
      [728, 515, 504, 448, 472, 413, 308, 506, 291, 361, 379, 354, 309, 222, 193, 133, 107, 0, 95, 89, 144, 514, 468, 621, 707, 768, 905, 833, 890, 584, 857, 938, 1040, 1034, 1106, 1186, 1104, 1196, 1209, 1150, 881, 823, 818, 798, 890, 932],
      [844, 611, 600, 544, 568, 509, 404, 602, 387, 457, 475, 450, 404, 318, 289, 228, 203, 95, 0, 166, 48, 610, 564, 717, 803, 864, 1001, 928, 986, 680, 952, 1034, 1136, 1130, 1202, 1282, 1200, 1292, 1304, 1246, 977, 919, 914, 894, 986, 1028],
      [702, 494, 482, 427, 451, 391, 286, 485, 270, 340, 357, 333, 287, 200, 171, 111, 85, 89, 166, 0, 118, 493, 447, 600, 685, 747, 884, 811, 869, 562, 835, 917, 1019, 1013, 1085, 1165, 1082, 1175, 1187, 1128, 860, 801, 796, 776, 869, 910],
      [845, 612, 600, 545, 569, 509, 404, 603, 388, 458, 476, 451, 405, 319, 290, 229, 204, 144, 48, 118, 0, 611, 565, 718, 804, 865, 1002, 929, 987, 680, 953, 1035, 1137, 1131, 1203, 1283, 1200, 1293, 1305, 1247, 978, 919, 914, 895, 987, 1028],
      [302, 350, 338, 245, 120, 247, 352, 154, 272, 152, 135, 138, 285, 292, 300, 360, 385, 493, 589, 471, 590, 0, 46, 294, 206, 267, 404, 332, 390, 83, 356, 438, 539, 751, 605, 685, 603, 695, 708, 649, 380, 322, 317, 297, 390, 431],
      [358, 396, 385, 291, 166, 294, 310, 200, 226, 106, 89, 92, 238, 246, 253, 314, 339, 447, 542, 425, 543, 46, 0, 291, 252, 314, 451, 378, 436, 129, 402, 484, 585, 704, 652, 732, 649, 742, 754, 695, 427, 368, 363, 343, 436, 477],
      [302, 366, 431, 346, 322, 449, 485, 356, 400, 304, 286, 266, 413, 416, 428, 488, 514, 621, 717, 600, 718, 294, 291, 0, 68, 129, 266, 194, 271, 54, 254, 300, 401, 433, 467, 558, 483, 576, 619, 575, 329, 271, 266, 246, 288, 329],
      [385, 435, 499, 414, 390, 518, 553, 424, 469, 372, 355, 335, 481, 485, 496, 557, 582, 690, 785, 668, 786, 362, 360, 68, 0, 61, 198, 125, 202, 123, 236, 231, 333, 651, 399, 490, 414, 507, 550, 609, 398, 339, 334, 314, 357, 398],
      [459, 496, 561, 476, 452, 579, 590, 485, 506, 409, 392, 372, 519, 546, 533, 594, 619, 727, 823, 705, 823, 423, 397, 129, 61, 0, 137, 64, 141, 184, 175, 170, 271, 590, 338, 428, 353, 446, 489, 547, 409, 333, 365, 345, 326, 367],
      [625, 633, 698, 613, 572, 699, 599, 606, 514, 418, 400, 380, 527, 683, 542, 602, 628, 735, 831, 714, 832, 452, 405, 266, 198, 137, 0, 72, 149, 321, 183, 178, 280, 598, 346, 437, 361, 454, 497, 556, 417, 342, 373, 353, 334, 376],
      [537, 561, 625, 540, 499, 627, 526, 533, 442, 345, 328, 308, 454, 610, 469, 529, 555, 662, 758, 641, 759, 379, 333, 194, 125, 64, 72, 0, 76, 248, 110, 105, 207, 525, 273, 364, 289, 381, 424, 483, 344, 269, 300, 280, 261, 303],
      [630, 638, 641, 547, 423, 550, 449, 457, 365, 268, 251, 231, 377, 668, 392, 452, 478, 585, 681, 564, 682, 302, 256, 271, 202, 141, 149, 76, 0, 306, 33, 182, 284, 448, 350, 317, 234, 327, 370, 428, 267, 192, 223, 204, 185, 226],
      [298, 363, 428, 342, 319, 446, 430, 352, 346, 249, 232, 212, 358, 361, 373, 433, 459, 566, 662, 545, 663, 283, 237, 54, 123, 184, 321, 248, 306, 0, 272, 354, 456, 755, 522, 602, 519, 612, 624, 566, 297, 238, 233, 214, 306, 347],
      [610, 619, 607, 514, 389, 516, 415, 423, 331, 234, 217, 197, 343, 634, 358, 419, 444, 552, 647, 530, 648, 268, 222, 254, 236, 175, 183, 110, 33, 272, 0, 216, 318, 482, 384, 351, 268, 361, 404, 438, 233, 158, 190, 170, 151, 192],
      [871, 837, 840, 747, 622, 749, 648, 656, 564, 467, 450, 430, 576, 716, 591, 652, 677, 785, 880, 763, 881, 501, 455, 300, 401, 340, 348, 276, 199, 505, 233, 0, 101, 284, 184, 275, 242, 335, 378, 437, 354, 279, 328, 403, 271, 295],
      [952, 904, 907, 814, 689, 816, 715, 723, 631, 534, 517, 497, 643, 818, 658, 719, 744, 852, 947, 830, 948, 568, 522, 401, 468, 407, 415, 342, 266, 572, 300, 101, 0, 182, 82, 173, 189, 281, 324, 383, 415, 346, 395, 470, 338, 338],
      [1173, 1086, 1090, 996, 871, 999, 898, 905, 814, 717, 699, 680, 826, 849, 841, 901, 927, 1034, 1130, 1013, 1131, 751, 704, 433, 651, 590, 598, 525, 448, 755, 482, 284, 182, 0, 99, 190, 273, 409, 452, 510, 589, 528, 578, 652, 521, 511],
      [1052, 986, 990, 896, 771, 899, 798,  805, 714, 617, 600, 580, 726, 884, 741, 801, 827, 934, 1030, 913, 1031, 651, 604, 467, 551, 490, 498, 425, 348, 655, 382, 184, 82, 99, 0, 90, 173, 309, 352, 410, 489, 428, 478, 552, 421, 411],
      [1014, 955, 958, 865, 740, 867, 766, 774, 682, 585, 568, 548, 695, 964, 709, 770, 795, 903, 999, 881, 999, 619, 573, 558, 519, 458, 466, 394, 317, 623, 351, 275, 173, 190, 90, 0, 82, 218, 261, 319, 398, 397, 447, 521, 361, 320],
      [914, 872, 876, 782, 657, 785, 684, 691, 600, 503, 485, 466, 612, 881, 627, 687, 713, 820, 916, 799, 917, 537, 490, 483, 437, 376, 384, 311, 234, 541, 268, 219, 189, 273, 173, 82, 0, 135, 178, 237, 315, 314, 364, 438, 279, 238],
      [1016, 957, 960, 866, 742, 869, 768, 776, 684, 587, 570, 550, 696, 974, 711, 771, 797, 904, 1000, 883, 1001, 621, 575, 576, 521, 460, 468, 395, 319, 625, 352, 303, 273, 409, 257, 166, 84, 0, 140, 109, 399, 399, 448, 523, 363, 322],
      [1078, 1008, 1005, 912, 787, 914, 814, 821, 729, 633, 615, 595, 742, 986, 757, 817, 842, 950, 1046, 928, 1047, 666, 620, 619, 572, 511, 519, 447, 370, 671, 404, 354, 324, 452, 352, 261, 178, 140, 0, 58, 274, 302, 352, 457, 238, 196],
      [1149, 1066, 1054, 961, 836, 963, 862, 870, 778, 681, 664, 644, 790, 928, 805, 866, 891, 999, 1095, 977, 1095, 715, 669, 575, 631, 570, 578, 505, 428, 719, 462, 413, 383, 510, 367, 276, 194, 109, 58, 0, 323, 351, 400, 505, 286, 245],
      [965, 898, 886, 793, 668, 795, 695, 702, 610, 514, 496, 476, 623, 659, 638, 698, 723, 831, 927, 809, 928, 547, 501, 329, 520, 459, 467, 395, 318, 552, 352, 365, 415, 589, 489, 398, 315, 378, 327, 268, 0, 183, 233, 338, 119, 77],
      [743, 714, 703, 609, 485, 612, 511, 519, 427, 330, 313, 293, 439, 600, 454, 514, 540, 647, 743, 626, 744, 364, 318, 271, 414, 353, 361, 289, 212, 368, 246, 271, 373, 528, 456, 397, 314, 407, 402, 343, 75, 0, 49, 154, 70, 111],
      [689, 670, 658, 565, 440, 567, 466, 474, 382, 285, 268, 248, 395, 595, 409, 470, 495, 603, 699, 581, 699, 319, 273, 266, 424, 403, 411, 338, 261, 323, 280, 321, 423, 578, 505, 447, 364, 442, 390, 332, 63, 49, 0, 109, 119, 141],
      [556, 560, 548, 455, 330, 457, 357, 364, 272, 176, 158, 138, 285, 576, 300, 360, 385, 493, 589, 471, 590, 209, 163, 246, 314, 345, 353, 280, 204, 214, 170, 374, 476, 652, 554, 499, 417, 507, 456, 397, 128, 107, 102, 0, 177, 206],
      [821, 779, 767, 674, 549, 676, 576, 583, 491, 395, 377, 357, 504, 668, 519, 579, 604, 712, 808, 690, 809, 428, 382, 288, 401, 340, 348, 276, 199, 433, 233, 258, 360, 521, 442, 361, 279, 371, 345, 286, 119, 64, 114, 219, 0, 41],
      [871, 820, 809, 715, 590, 718, 617, 624, 533, 436, 419, 399, 545, 709, 560, 620, 646, 753, 849, 732, 850, 470, 423, 329, 442, 381, 390, 317, 240, 474, 274, 287, 338, 511, 411, 320, 238, 330, 304, 245, 77, 105, 155, 260, 41, 0]])

    self.matrix = np.delete(self.matrix, (self.Z), axis=0)
    self.matrix = np.delete(self.matrix, (self.Z), axis=1)
    self.matrix = np.ndarray.tolist(self.matrix)


  def Distance(self, from_node, to_node):
    return int(self.matrix[from_node][to_node])
  def Path(self):

    global return_route, assignment
    city_names = np.array(["A0", "A122", "A124", "A131", "A132", "A119", "A120", "A133", "A104", "A99", "A100", "A134", "A95", "A108", "A109", "A111", "A112", "A114", "A135", "A118", "A116", "A136", "A102", "A8", "A10", "A12", "A14", "A13", "A15", "A129", "A79", "A41", "A38", "A26", "A28", "A30", "A32", "A59", "A56", "A61", "A68", "A72", "A137", "A138", "A74", "A75"])  #, "A3", "A120"
    city_names = np.delete(city_names,self.Z)

    tsp_size = len(city_names)
    # tsp_size = 4

    num_routes = 1    # The number of routes, which is 1 in the TSP.
    # Nodes are indexed from 0 to tsp_size - 1. The depot is the starting node of the route.
    depot = 0

    # Create routing model
    if tsp_size > 0:
      routing = pywrapcp.RoutingModel(tsp_size, num_routes, depot)
      search_parameters = pywrapcp.RoutingModel.DefaultSearchParameters()

      # Create the distance callback, which takes two arguments (the from and to node indices)
      # and returns the distance between these nodes.
      dist_callback = self.Distance
      routing.SetArcCostEvaluatorOfAllVehicles(dist_callback)
      # Solve, returns a solution if any.
      assignment = routing.SolveWithParameters(search_parameters)
      if assignment:
        # Solution cost.
        # print ("Total distance: " + str(assignment.ObjectiveValue()) + " miles\n")
        # Inspect solution.
        # Only one route here; otherwise iterate from 0 to routing.vehicles() - 1
        return_route = []
        route_number = self.start
        index = routing.Start(route_number) # Index of the variable for the starting node.
        route = ''
        while not routing.IsEnd(index):
          # Convert variable indices to node indices in the displayed route.
          route += str(city_names[routing.IndexToNode(index)]) + ' -> '
          return_route.append(str(city_names[routing.IndexToNode(index)]))
          index = assignment.Value(routing.NextVar(index))
        route += str(city_names[routing.IndexToNode(index)])
        # print ("Route:\n\n" + route)
      else:
        print ('No solution found.')
    else:
      print ('Specify an instance greater than 0.')

    return_route.append('A0')
    return assignment.ObjectiveValue(),return_route

if __name__ == '__main__':
  use = CreateDistanceCallback([3],0)
  distance,return_route = use.Path()
  print(distance)
  print(return_route)